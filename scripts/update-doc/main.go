package main

import (
	"bufio"
	"bytes"
	"os"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"

	command "github.com/burgrp/surp-go/cmd/surp/commands"
)

const (
	readmeFilePath = "../../README.md"
)

func appendCmdDoc(cmd *cobra.Command, lines []string) ([]string, error) {

	out := new(bytes.Buffer)

	err := doc.GenMarkdownCustom(cmd, out, func(s string) string {
		return "#" + strings.ReplaceAll(strings.ReplaceAll(s, ".md", ""), "_", "-")
	})

	if err != nil {
		return nil, err
	}

	reader := bytes.NewReader(out.Bytes())
	scanner := bufio.NewScanner(reader)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "#") {
			line = "##" + line
		}
		if strings.Contains(line, "Auto generated by spf13/cobra") {
			continue
		}
		lines = append(lines, line)
	}

	return lines, nil
}

func readFile(path string) ([]string, error) {

	file, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	if err := scanner.Err(); err != nil {
		return nil, err
	}

	return lines, nil
}

func main() {

	original, err := readFile(readmeFilePath)
	if err != nil {
		panic(err)
	}

	new_lines := make([]string, 0)

	insertionAnchor := false
	for _, line := range original {
		new_lines = append(new_lines, line)
		if strings.Trim(line, " ") == "### Reference" {
			insertionAnchor = true
			break
		}
	}

	new_lines = append(new_lines, "")

	if !insertionAnchor {
		panic("Insertion anchor not found")
	}

	rootCmd := command.GetRootCommand()

	new_lines, err = appendCmdDoc(rootCmd, new_lines)
	if err != nil {
		panic(err)
	}

	for _, command := range rootCmd.Commands() {
		new_lines, err = appendCmdDoc(command, new_lines)
		if err != nil {
			panic(err)
		}
	}

	outputFile, err := os.Create(readmeFilePath)
	if err != nil {
		panic(err)
	}
	defer outputFile.Close()

	for _, line := range new_lines {
		_, err := outputFile.WriteString(line + "\n")
		if err != nil {
			panic(err)
		}
	}
}
